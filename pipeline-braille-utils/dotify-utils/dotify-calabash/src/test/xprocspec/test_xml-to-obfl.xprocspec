<?xml version="1.0" encoding="UTF-8"?>
<x:description xmlns:x="http://www.daisy.org/ns/xprocspec"
               xmlns:dotify="http://code.google.com/p/dotify/"
               xmlns:obfl="http://www.daisy.org/ns/2011/obfl"
               script="../resources/xml-to-obfl.xpl">
  
  <x:scenario label="test_01">
    <x:call step="dotify:xml-to-obfl">
      <x:input port="source">
        <x:document type="inline">
          <dtbook xmlns="http://www.daisy.org/z3986/2005/dtbook/" xml:lang="sv">
            <!-- This is not really a dtbook, but it will work for the existing test -->
            <book>
              <bodymatter>
                <p>Testar modulen</p>
              </bodymatter>
            </book>
          </dtbook>
        </x:document>
      </x:input>
      <x:option name="locale" select="'sv-SE'"/>
      <x:param port="parameters" name="rows" select="'29'"/>
      <x:param port="parameters" name="cols" select="'28'"/>
      <x:param port="parameters" name="rowgap" select="'4'"/>
    </x:call>
    <x:context label="result">
      <x:document type="port" port="result"/>
    </x:context>
    <x:expect label="result is obfl" type="xpath" test="/obfl:obfl"/>
    <x:expect label="result" type="custom" href="http://www.daisy.org/pipeline/modules/braille/obfl-utils/library.xpl" step="x:obfl-compare">
      <x:document type="inline">
        <obfl xmlns="http://www.daisy.org/ns/2011/obfl" version="2011-1" hyphenate="true" xml:lang="sv">
          <meta xmlns:dc="http://purl.org/dc/elements/1.1/"/>
          <layout-master name="front" page-width="32" page-height="29" inner-margin="2" outer-margin="2" row-spacing="2" duplex="true">
            <template use-when="(= (% $page 2) 0)">
              <header>
                <field>
                  <string value="  "/>
                  <current-page number-format="roman"/>
                </field>
              </header>
              <footer/>
            </template>
            <default-template>
              <header row-spacing="1">
                <field>
                  <string value=""/>
                </field>
                <field>
                  <current-page number-format="roman"/>
                </field>
              </header>
              <footer/>
            </default-template>
          </layout-master>
          <layout-master name="main" page-width="32" page-height="29" inner-margin="2" outer-margin="2" row-spacing="2" duplex="true">
            <template use-when="(= (% $page 2) 0)">
              <header>
                <field>
                  <string value="  "/>
                  <current-page number-format="default"/>
                </field>
                <field>
                  <marker-reference marker="pagenum-turn" direction="forward" scope="page-content"/>
                  <marker-reference marker="pagenum" direction="backward" scope="sequence"/>
                </field>
              </header>
              <footer/>
            </template>
            <default-template>
              <header row-spacing="1">
                <field>
                  <string value="  "/>
                  <marker-reference marker="pagenum-turn" direction="forward" scope="page-content"/>
                  <marker-reference marker="pagenum" direction="backward" scope="sequence"/>
                </field>
                <field>
                  <current-page number-format="default"/>
                </field>
              </header>
              <footer/>
            </default-template>
          </layout-master>
          <layout-master name="plain" page-width="32" page-height="29" inner-margin="2" outer-margin="2" row-spacing="2" duplex="true">
            <template use-when="(= (% $page 2) 0)">
              <header>
                <field>
                  <string value=""/>
                </field>
              </header>
              <footer/>
            </template>
            <default-template>
              <header row-spacing="1">
                <field>
                  <string value=""/>
                </field>
              </header>
              <footer/>
            </default-template>
          </layout-master>
          <layout-master name="notes" page-width="32" page-height="29" inner-margin="2" outer-margin="2" row-spacing="2" duplex="true">
            <template use-when="(= (% $page 2) 0)">
              <header>
                <field>
                  <string value="  "/>
                  <string value="Noter "/>
                  <current-page number-format="default"/>
                </field>
              </header>
              <footer/>
            </template>
            <default-template>
              <header row-spacing="1">
                <field>
                  <string value=""/>
                </field>
                <field>
                  <string value="Noter "/>
                  <current-page number-format="default"/>
                </field>
              </header>
              <footer/>
            </default-template>
          </layout-master>
          <layout-master name="cover" page-width="32" page-height="29" inner-margin="2" outer-margin="2" row-spacing="1" duplex="true" border-style="solid" border-width="1" border-align="outer">
            <default-template>
              <header/>
              <footer/>
            </default-template>
          </layout-master>
          <xml-processor name="table-as-block">
            <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0" exclude-result-prefixes="dotify tmp">
              <xsl:param name="debug" select="false()" as="axs:boolean"/>
              <xsl:param name="rowspanName" select="'row-span'" as="axs:string"/>
              <xsl:param name="colspanName" select="'col-span'" as="axs:string"/>
              <xsl:template match="node()">
                <xsl:copy>
                  <xsl:copy-of select="@*"/>
                  <xsl:apply-templates/>
                </xsl:copy>
              </xsl:template>
              <xsl:template match="dotify:node">
                <aobfl:xml-processor-result xmlns:aobfl="http://www.daisy.org/ns/2011/obfl">
                  <xsl:apply-templates xmlns:xsl="http://www.w3.org/1999/XSL/Transform"/>
                </aobfl:xml-processor-result>
              </xsl:template>
              <xsl:template match="aobfl:table">
                <xsl:variable name="grid">
                  <xsl:apply-templates select="." mode="makeGrid"/>
                </xsl:variable>
                <xsl:variable name="sortedGrid">
                  <xsl:for-each select="$grid/tmp:cell">
                    <xsl:sort select="axs:integer(@row)"/>
                    <xsl:sort select="axs:integer(@col)"/>
                    <xsl:copy-of select="."/>
                  </xsl:for-each>
                </xsl:variable>
                <aobfl:block xmlns:aobfl="http://www.daisy.org/ns/2011/obfl">
                  <xsl:apply-templates xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$sortedGrid/tmp:cell[@col=1]">
                    <xsl:with-param name="table" select="."/>
                  </xsl:apply-templates>
                </aobfl:block>
              </xsl:template>
              <xsl:template match="tmp:cell[@col=1]">
                <xsl:param name="table" required="yes"/>
                <aobfl:block xmlns:aobfl="http://www.daisy.org/ns/2011/obfl">
                  <xsl:call-template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="copyCell">
                    <xsl:with-param name="cell" select="."/>
                    <xsl:with-param name="table" select="$table"/>
                  </xsl:call-template>
                  <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="cr" select="@row"/>
                  <xsl:apply-templates xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="following-sibling::tmp:cell[@row=$cr][1]" mode="thisRow">
                    <xsl:with-param name="table" select="$table"/>
                  </xsl:apply-templates>
                </aobfl:block>
              </xsl:template>
              <xsl:template match="tmp:cell[@col!=1]" mode="thisRow">
                <xsl:param name="table" required="yes"/>
                <aobfl:block xmlns:aobfl="http://www.daisy.org/ns/2011/obfl" margin-left="2">
                  <xsl:call-template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="copyCell">
                    <xsl:with-param name="cell" select="."/>
                    <xsl:with-param name="table" select="$table"/>
                  </xsl:call-template>
                  <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="cr" select="@row"/>
                  <xsl:apply-templates xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="following-sibling::tmp:cell[@row=$cr][1]" mode="thisRow">
                    <xsl:with-param name="table" select="$table"/>
                  </xsl:apply-templates>
                </aobfl:block>
              </xsl:template>
              <xsl:template match="tmp:cell" mode="thisRow">
                <xsl:message terminate="yes">Internal error.</xsl:message>
              </xsl:template>
              <xsl:template name="copyCell">
                <xsl:param name="cell" required="yes"/>
                <xsl:param name="table" required="yes"/>
                <xsl:choose>
                  <xsl:when test="$cell/@col-offset=0 and $cell/@row-offset=0">
                    <xsl:variable name="node" select="$table//*[generate-id()=$cell/@id]"/>
                    <xsl:if test="count($node)!=1">Error in stylesheet.</xsl:if>
                    <xsl:copy-of select="$node/node()"/>
                    <xsl:if test="count($node/node())=0">—</xsl:if>
                  </xsl:when>
                  <xsl:otherwise>
                    <aobfl:style xmlns:aobfl="http://www.daisy.org/ns/2011/obfl" name="table-cell-continued"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:template>
              <xsl:template match="*:table" mode="makeGrid">
                <xsl:variable name="result">
                  <xsl:apply-templates select="descendant::*[self::*:td or self::*:th][last()]" mode="gridBuilderOuter">
                    <xsl:with-param name="table-id" select="generate-id()"/>
                  </xsl:apply-templates>
                </xsl:variable>
                <xsl:copy-of select="$result"/>
                <tmp:summary xmlns:tmp="http://brailleapps.github.io/ns/dotify/result">
                  <xsl:attribute xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="grid-width" select="dotify:calculateGridWidth($result)"/>
                  <xsl:copy-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="dotify:getValidSplitPoints($result)"/>
                </tmp:summary>
              </xsl:template>
              <xsl:template match="*[self::*:td or self::*:th]" mode="gridBuilderOuter">
                <xsl:param name="table-id" required="yes"/>
                <xsl:variable name="grid">
                  <xsl:apply-templates select="preceding::*[self::*:td or self::*:th][1][ancestor::*:table[generate-id()=$table-id]]" mode="gridBuilderOuter">
                    <xsl:with-param name="table-id" select="$table-id"/>
                  </xsl:apply-templates>
                </xsl:variable>
                <xsl:copy-of select="$grid"/>
                <xsl:variable name="gy" select="ancestor::*:tr/count(preceding-sibling::*:tr)+1"/>
                <xsl:variable name="gx">
                  <xsl:call-template name="findGridX">
                    <xsl:with-param name="grid" select="$grid"/>
                    <xsl:with-param name="gy" select="$gy"/>
                  </xsl:call-template>
                </xsl:variable>
                <xsl:apply-templates select="." mode="gridBuilderInner">
                  <xsl:with-param name="gx" select="$gx"/>
                  <xsl:with-param name="gy" select="$gy"/>
                </xsl:apply-templates>
              </xsl:template>
              <xsl:template match="*[self::*:td or self::*:th]" mode="gridBuilderInner">
                <xsl:param name="i" select="1"/>
                <xsl:param name="gx" select="1"/>
                <xsl:param name="gy" select="1"/>
                <xsl:variable name="rowspan">
                  <xsl:choose>
                    <xsl:when test="@*[name()=$rowspanName]">
                      <xsl:value-of select="@*[name()=$rowspanName]"/>
                    </xsl:when>
                    <xsl:otherwise>1</xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="colspan">
                  <xsl:choose>
                    <xsl:when test="@*[name()=$colspanName]">
                      <xsl:value-of select="@*[name()=$colspanName]"/>
                    </xsl:when>
                    <xsl:otherwise>1</xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:if test="$i&lt;=$rowspan*$colspan">
                <xsl:variable name="cr" select="floor(($i - 1) div $colspan)"/>
                <xsl:variable name="cc" select="(($i - 1) mod $colspan)"/>
                <tmp:cell xmlns:tmp="http://brailleapps.github.io/ns/dotify/result" row="{$gy+$cr}" col="{$gx+$cc}" row-offset="{$cr}" col-offset="{$cc}" id="{generate-id()}" rowspan="{$rowspan}" colspan="{$colspan}" heading="{count(self::*:th)=1}">
                  <xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$debug">
                    <xsl:attribute name="text" select="text()"/>
                  </xsl:if>
                </tmp:cell>
                <xsl:apply-templates select="." mode="gridBuilderInner">
                  <xsl:with-param name="i" select="$i+1"/>
                  <xsl:with-param name="gx" select="$gx"/>
                  <xsl:with-param name="gy" select="$gy"/>
                </xsl:apply-templates>
              </xsl:if>
            </xsl:template>
            <xsl:template name="findGridX">
              <xsl:param name="gx" select="1"/>
              <xsl:param name="gy" select="1"/>
              <xsl:param name="grid"/>
              <xsl:choose>
                <xsl:when test="$grid/tmp:cell[@row=$gy and @col=$gx]">
                  <xsl:call-template name="findGridX">
                    <xsl:with-param name="gx" select="$gx+1"/>
                    <xsl:with-param name="gy" select="$gy"/>
                    <xsl:with-param name="grid" select="$grid"/>
                  </xsl:call-template>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="$gx"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:template>
            <xsl:function name="dotify:isValidSplitPoint">
              <xsl:param name="grid"/>
              <xsl:param name="split"/>
              <xsl:choose>
                <xsl:when test="count($grid/tmp:cell[@col=$split])=count($grid/tmp:cell[@col=$split and @col-offset=0])">true</xsl:when>
                <xsl:otherwise>false</xsl:otherwise>
              </xsl:choose>
            </xsl:function>
            <xsl:function name="dotify:getValidSplitPoints">
              <xsl:param name="grid"/>
              <xsl:call-template name="getValidSplitPoints">
                <xsl:with-param name="grid" select="$grid"/>
              </xsl:call-template>
            </xsl:function>
            <xsl:template name="getValidSplitPoints">
              <xsl:param name="grid" required="yes"/>
              <xsl:param name="split" select="1"/>
              <xsl:choose>
                <xsl:when test="count($grid/tmp:cell[@col=$split])=count($grid/tmp:cell[@col=$split and @col-offset=0])">
                  <tmp:split-point xmlns:tmp="http://brailleapps.github.io/ns/dotify/result" index="{$split}"/>
                </xsl:when>
                <xsl:otherwise/>
              </xsl:choose>
              <xsl:if test="count($grid/tmp:cell[@col=$split+1])>0">
                <xsl:call-template name="getValidSplitPoints">
                  <xsl:with-param name="grid" select="$grid"/>
                  <xsl:with-param name="split" select="$split+1"/>
                </xsl:call-template>
              </xsl:if>
            </xsl:template>
            <xsl:function name="dotify:calculateGridWidth">
              <xsl:param name="grid"/>
              <xsl:value-of select="count($grid/tmp:cell[@row=1])"/>
            </xsl:function>
            <xsl:function name="dotify:gridAsString">
              <xsl:param name="grid"/>
              <xsl:for-each select="$grid/tmp:cell">
                <xsl:for-each select="@*">
                  <xsl:value-of select="name()"/>=
                  <xsl:value-of select="."/>
                  <xsl:text>	</xsl:text>
                </xsl:for-each>
                <xsl:text> </xsl:text>
              </xsl:for-each>
            </xsl:function>
          </xsl:stylesheet>
        </xml-processor>
        <xml-processor name="identity">
          <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0" exclude-result-prefixes="dotify">
            <xsl:template match="dotify:node">
              <xml-processor-result xmlns="http://www.daisy.org/ns/2011/obfl">
                <xsl:copy-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="*"/>
              </xml-processor-result>
            </xsl:template>
            <xsl:template match="*">
              <xsl:copy-of select="*"/>
            </xsl:template>
          </xsl:stylesheet>
        </xml-processor>
        <renderer name="table-renderer">
          <rendering-scenario processor="identity" cost="(+ (* 100 $forced-break-count) $total-height (/ (- 32 $min-block-width) 32))"/>
          <rendering-scenario processor="table-as-block" cost="(+ (* 100 $forced-break-count) $total-height (/ (- 32 $min-block-width) 32))"/>
        </renderer>
        <volume-template sheets-in-volume-max="50">
          <pre-content>
            <sequence master="cover">
              <block align="center" padding-top="3" margin-left="2" margin-right="2"> </block>
              <block align="center" margin-left="2" margin-right="2" vertical-align="before" vertical-position="100%" hyphenate="false">
                  <evaluate expression="    (if (&gt; $volumes 1)      (format &#34;Volym {0} av {1}&#34; (int2text (round $volume) sv) (int2text (round $volumes) sv))     &#34;En volym&#34;)"/>

              </block>
            </sequence>
          </pre-content>
          <post-content/>
        </volume-template>
        <sequence master="main" initial-page-number="1">
          <block>Testar modulen</block>
        </sequence>
      </obfl>
      </x:document>
    </x:expect>
  </x:scenario>
  
  <x:scenario label="test_02" pending="throws error because of whitespace only text nodes in note element">
    <x:documentation>
      see https://github.com/snaekobbi/pipeline-mod-mtm/issues/14
    </x:documentation>
    <x:call step="dotify:xml-to-obfl">
      <x:input port="source">
        <x:document type="file" href="../resources/simple-note.xml"/>
      </x:input>
      <x:option name="locale" select="'sv-SE'"/>
    </x:call>
    <x:context label="result">
      <x:document type="port" port="result"/>
    </x:context>
    <x:expect label="result" type="custom" href="http://www.daisy.org/pipeline/modules/braille/obfl-utils/library.xpl" step="x:obfl-compare">
      <x:document type="inline">
        <_>...</_>
      </x:document>
    </x:expect>
  </x:scenario>
  
</x:description>
